document.addEventListener("DOMContentLoaded", function () {
  var e, t;
  let a,
    s,
    n,
    i,
    r = {},
    o = 1,
    l = {
      texture: null,
      design: { jacket: {}, pants: {} },
      embroidery: { jacket: [], pants: { location: null, text: "" } },
      measurements: {},
    },
    c,
    d,
    p,
    m,
    u,
    g = [],
    $ = [],
    h = [],
    y = {},
    _,
    k = document.getElementById("embroideryLocationsContainer"),
    b = {
      Back: ["4on2_Back_1", "4on2_Back_2", "4on2_Back_3"],
      Lapels: ["4on2_Lapels_1", "4on2_Lapels_2", "4on2_Lapels_3"],
      Pockets: [
        "4on2_pocket_1",
        "4on2_pocket_2",
        "4on2_pocket_3",
        "4on2_pocket_4",
        "4on2_pocket_5",
        "4on2_pocket_6",
        "4on2_pocket_7",
        "4on2_pocket_8",
      ],
    },
    v = {};
  for (let f in b) v[f] = {};
  let E = {},
    C = document.getElementById("renderCanvas"),
    L = new BABYLON.Engine(C, !0, { preserveDrawingBuffer: !0, stencil: !0 }),
    x = document.getElementById("tooltip"),
    A = !1,
    w = !1,
    I = !1,
    M = !1,
    P = 0,
    T = 0,
    S = "front";
  function N(e) {
    return e % (2 * Math.PI);
  }
  let j = () => {
    ((p = new BABYLON.Scene(L)).clearColor = new BABYLON.Color3(1, 1, 1)),
      (u = new BABYLON.ArcRotateCamera(
        "camera",
        0,
        Math.PI / 2,
        5,
        new BABYLON.Vector3(0, 1, 0),
        p
      )).attachControl(C, !0),
      (u.panningSensibility = 0),
      (u.lowerRadiusLimit = 2.5),
      (u.upperRadiusLimit = 20),
      (u.wheelPrecision = 100),
      new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), p);
    let e = new BABYLON.DirectionalLight(
      "dirLight",
      new BABYLON.Vector3(-1, -2, -1),
      p
    );
    (e.position = new BABYLON.Vector3(20, 40, 20)),
      (p.useRightHandedSystem = !0),
      (d = new BABYLON.StandardMaterial("material", p)),
      (m = new BABYLON.TransformNode("parent", p)),
      (_ = new BABYLON.HighlightLayer("hl1", p));
    let t = 0,
      r = () => {
        4 == ++t &&
          ((m.rotation.y = Math.PI / 2),
          (T = P = m.rotation.y),
          (S = "front"),
          K("./batch1/E5101-38.png"),
          (function e() {
            m.computeWorldMatrix(!0);
            let t = m.getChildMeshes(),
              r = new BABYLON.Vector3(
                Number.MAX_VALUE,
                Number.MAX_VALUE,
                Number.MAX_VALUE
              ),
              o = new BABYLON.Vector3(
                -Number.MAX_VALUE,
                -Number.MAX_VALUE,
                -Number.MAX_VALUE
              );
            t.forEach((e) => {
              e.computeWorldMatrix(!0);
              let t = e.getBoundingInfo(),
                a = t.boundingBox.minimumWorld,
                s = t.boundingBox.maximumWorld;
              (r = BABYLON.Vector3.Minimize(r, a)),
                (o = BABYLON.Vector3.Maximize(o, s));
            });
            let l = r.add(o).scale(0.5);
            (m.position = m.position.subtract(l)),
              u.setTarget(BABYLON.Vector3.Zero());
            let c = o.subtract(r).length();
            (u.radius = 1.5 * c),
              (a = u.radius),
              (s = u.target.clone()),
              (n = u.alpha),
              (i = u.beta),
              (u.upperRadiusLimit = a);
          })(),
          J(o));
      };
    function l(e) {
      return e.startsWith("4on2_Back")
        ? "Back"
        : e.startsWith("4on2_Lapels")
        ? "Lapels"
        : e.startsWith("4on2_pocket")
        ? "Pockets"
        : null;
    }
    BABYLON.SceneLoader.ImportMesh("", "./", "jacket.gltf", p, (e) => {
      e.forEach((e) => {
        (e.material = d),
          (e.parent = m),
          g.push(e),
          (e.renderingGroupId = 2),
          (y[e.name] = e);
        let t = l(e.name);
        t && ((E[t] = e), (v[t][e.name] = e)),
          (e.actionManager = new BABYLON.ActionManager(p)),
          e.actionManager.registerAction(
            new BABYLON.ExecuteCodeAction(
              BABYLON.ActionManager.OnPointerOverTrigger,
              function (t) {
                let a = l(e.name);
                if (a && E[a]) {
                  let s = E[a];
                  _.addMesh(s, BABYLON.Color3.White()),
                    (C.style.cursor = "pointer"),
                    (x.style.display = "block"),
                    (x.innerHTML = a);
                }
              }
            )
          ),
          e.actionManager.registerAction(
            new BABYLON.ExecuteCodeAction(
              BABYLON.ActionManager.OnPointerOutTrigger,
              function (t) {
                let a = l(e.name);
                if (a && E[a]) {
                  let s = E[a];
                  _.removeMesh(s),
                    (C.style.cursor = "default"),
                    (x.style.display = "none");
                }
              }
            )
          ),
          e.actionManager.registerAction(
            new BABYLON.ExecuteCodeAction(
              BABYLON.ActionManager.OnPickDownTrigger,
              function (a) {
                O(e), z(t, e.name);
              }
            )
          );
      }),
        r();
    }),
      BABYLON.SceneLoader.ImportMesh("", "./", "pants.gltf", p, (e) => {
        e.forEach((e) => {
          (e.renderingGroupId = 2),
            (e.material = d),
            (e.parent = m),
            $.push(e),
            (y[e.name] = e);
        }),
          r();
      });
    let k = new BABYLON.PBRMaterial("mannequinMaterial", p);
    (k.albedoColor = new BABYLON.Color3(0.08, 0.08, 0.08)),
      (k.metallic = 0),
      (k.roughness = 1);
    let f = new BABYLON.PBRMaterial("shoeMaterial", p);
    for (let A in ((f.albedoColor = new BABYLON.Color3(0, 0, 0)),
    (f.metallic = 0.5),
    (f.roughness = 0.5),
    BABYLON.SceneLoader.ImportMesh("", "./", "Mannequin.gltf", p, (e) => {
      (mannequinRoot = new BABYLON.TransformNode("mannequinRoot", p)),
        e.forEach((e) => {
          (e.renderingGroupId = 1),
            console.log("Mesh Name:", e.name),
            (e.parent = mannequinRoot),
            h.push(e),
            (e.actionManager = null),
            (e.useVertexColors = !1),
            e.material && e.material.dispose(),
            (e.material = null),
            e.name.includes("unamed_unamedmesh_1") ||
            e.name.includes("Posed__mask_")
              ? (e.material = k)
              : ("shoe_L" === e.name || "shoe_R" === e.name) &&
                (e.material = f);
        }),
        (mannequinRoot.parent = m),
        (mannequinRoot.scaling = new BABYLON.Vector3(0.01, 0.01, 0.01)),
        (mannequinRoot.position = new BABYLON.Vector3(0, 0, 0)),
        r(),
        c
          ? (c.setEnabled(!0),
            console.log("Shirt already loaded. Ensured it is visible."))
          : BABYLON.SceneLoader.ImportMesh("", "./", "shirt.gltf", p, (e) => {
              let t = new BABYLON.StandardMaterial("shirtMaterial", p);
              (t.diffuseColor = new BABYLON.Color3(1, 1, 1)),
                (t.backFaceCulling = !1),
                (c = new BABYLON.TransformNode("shirtRoot", p));
              let a = [];
              e.forEach((e) => {
                e instanceof BABYLON.Mesh &&
                  (console.log("[SHIRT LOAD] Found shirt mesh:", e.name),
                  a.push(e),
                  (e.material = t),
                  (e.parent = c),
                  (e.scaling = new BABYLON.Vector3(1, 1, 1)),
                  (e.rotation = new BABYLON.Vector3(0, 0, 0)),
                  (e.position = new BABYLON.Vector3(0, 0, 0)),
                  "Front_1" === e.name
                    ? (e.renderingGroupId = 2)
                    : "2_Button" == e.name
                    ? (e.renderingGroupId = 2)
                    : (e.renderingGroupId = 1));
              }),
                (c.parent = mannequinRoot),
                (c.scaling = new BABYLON.Vector3(1, 1, 0.9)),
                (c.position = new BABYLON.Vector3(0, 0, 0)),
                (T = P = c.rotation.y),
                (S = "front");
              let s = [
                "1_pleat",
                "2_Button",
                "Round_Cuffs",
                "Front_1",
                "Sleeves",
              ];
              a.forEach((e) => {
                s.includes(e.name)
                  ? (e.setEnabled(!0), _.addMesh(e, BABYLON.Color3.White()))
                  : e.setEnabled(!1);
              }),
                r();
            });
    }),
    b))
      b[A].forEach((e) => {
        if (v[A][e]) return;
        let t = e + ".gltf";
        BABYLON.SceneLoader.ImportMesh(
          "",
          "./jacket-seperate-pieces/",
          t,
          p,
          (t) => {
            t.forEach((t) => {
              (t.material = d),
                (t.parent = m),
                (v[A][e] = t),
                (y[t.name] = t),
                t.setEnabled(!1),
                (t.actionManager = new BABYLON.ActionManager(p)),
                t.actionManager.registerAction(
                  new BABYLON.ExecuteCodeAction(
                    BABYLON.ActionManager.OnPickDownTrigger,
                    function (e) {
                      O(t), z(A, t.name);
                    }
                  )
                );
            });
          }
        );
      });
    return (
      (p.onPointerDown = function (e, t) {
        t.hit ||
          (_.removeAllMeshes(),
          document
            .querySelectorAll(".part-item")
            .forEach((e) => e.classList.remove("selected")));
      }),
      (p.onPointerMove = function (e, t) {
        "block" === x.style.display &&
          ((x.style.left = e.clientX + 10 + "px"),
          (x.style.top = e.clientY + 10 + "px"),
          (x.style.zIndex = 999));
      }),
      p.registerBeforeRender(() => {
        let e = N(u.alpha);
        e < Math.PI / 4 || e > (7 * Math.PI) / 4
          ? "front" !== S &&
            ((S = "front"), console.log("Orientation changed to Front"))
          : e > (3 * Math.PI) / 4 &&
            e < (5 * Math.PI) / 4 &&
            "back" !== S &&
            ((S = "back"), console.log("Orientation changed to Back"));
      }),
      p
    );
  };
  function B() {
    let e = document.querySelectorAll(".part-option"),
      t = document.querySelectorAll(".part-item");
    e.forEach((e) => {
      e.addEventListener("mouseenter", function () {
        let e = this.getAttribute("data-part-name"),
          t = this.getAttribute("data-mesh-name"),
          a = v[e][t];
        a && _.addMesh(a, BABYLON.Color3.White());
      }),
        e.addEventListener("mouseleave", function () {
          let e = this.getAttribute("data-part-name"),
            t = this.getAttribute("data-mesh-name"),
            a = v[e][t];
          a && _.removeMesh(a);
        });
    }),
      t.forEach((e) => {
        e.addEventListener("mouseenter", function () {
          let e = this.getAttribute("data-part"),
            t = E[e];
          t && _.addMesh(t, BABYLON.Color3.White());
        }),
          e.addEventListener("mouseleave", function () {
            let e = this.getAttribute("data-part"),
              t = E[e];
            t && _.removeMesh(t);
          });
      });
  }
  function O(e) {
    if (!e) {
      console.error("zoomToMesh called with undefined mesh");
      return;
    }
    console.log(`Zooming to mesh: ${e.name}`);
    let t = e.getBoundingInfo(),
      a = t.boundingBox.centerWorld,
      s = 1.5 * t.boundingSphere.radiusWorld;
    p.stopAnimation(u);
    let n = new BABYLON.Animation(
        "cameraRadiusAnim",
        "radius",
        60,
        BABYLON.Animation.ANIMATIONTYPE_FLOAT,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      ),
      i = [
        { frame: 0, value: u.radius },
        { frame: 240, value: s },
      ];
    n.setKeys(i),
      n.setEasingFunction(new BABYLON.CubicEase()),
      n
        .getEasingFunction()
        .setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);
    let r = new BABYLON.Animation(
        "cameraTargetXAnim",
        "target.x",
        60,
        BABYLON.Animation.ANIMATIONTYPE_FLOAT,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      ),
      o = new BABYLON.Animation(
        "cameraTargetYAnim",
        "target.y",
        60,
        BABYLON.Animation.ANIMATIONTYPE_FLOAT,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      ),
      l = new BABYLON.Animation(
        "cameraTargetZAnim",
        "target.z",
        60,
        BABYLON.Animation.ANIMATIONTYPE_FLOAT,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      ),
      c = [
        { frame: 0, value: u.target.x },
        { frame: 240, value: a.x },
      ],
      d = [
        { frame: 0, value: u.target.y },
        { frame: 240, value: a.y },
      ],
      m = [
        { frame: 0, value: u.target.z },
        { frame: 240, value: a.z },
      ];
    r.setKeys(c), o.setKeys(d), l.setKeys(m);
    let g = new BABYLON.CubicEase();
    g.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT),
      r.setEasingFunction(g),
      o.setEasingFunction(g),
      l.setEasingFunction(g),
      (u.animations = []),
      u.animations.push(n),
      u.animations.push(r),
      u.animations.push(o),
      u.animations.push(l),
      p.beginAnimation(u, 0, 240, !1, 1, () => {
        console.log(`Camera smoothly zoomed to mesh: ${e.name}`);
      });
  }
  function H(e, t = 0) {
    if (!Array.isArray(e) || 0 === e.length) return;
    let a = new BABYLON.Vector3(
        Number.MAX_VALUE,
        Number.MAX_VALUE,
        Number.MAX_VALUE
      ),
      s = new BABYLON.Vector3(
        -Number.MAX_VALUE,
        -Number.MAX_VALUE,
        -Number.MAX_VALUE
      );
    e.forEach((e) => {
      if (!(e instanceof BABYLON.Mesh)) return;
      e.computeWorldMatrix(!0);
      let t = e.getBoundingInfo(),
        n = t.boundingBox.minimumWorld,
        i = t.boundingBox.maximumWorld;
      (a = BABYLON.Vector3.Minimize(a, n)),
        (s = BABYLON.Vector3.Maximize(s, i));
    });
    let n = a.add(s).scale(0.5),
      i = s.y - a.y;
    n.y += i * t;
    let r = 0.6 * BABYLON.Vector3.Distance(a, s);
    BABYLON.Animation.CreateAndStartAnimation(
      "cameraRadiusAnim",
      u,
      "radius",
      60,
      120,
      u.radius,
      r,
      BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
    ),
      BABYLON.Animation.CreateAndStartAnimation(
        "cameraTargetAnim",
        u,
        "target",
        60,
        120,
        u.target.clone(),
        n,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      );
  }
  function z(e, t) {
    let a = { Back: Math.PI, Lapels: 0, Pockets: 0 }[e] || 0,
      s = P + a;
    (T = s = N(s)),
      (S = a === Math.PI ? "back" : "front"),
      console.log(`Current Orientation: ${S}`);
  }
  function q() {
    if (void 0 === a || void 0 === s || void 0 === n || void 0 === i) {
      console.error("Initial camera parameters are not set.");
      return;
    }
    BABYLON.Animation.CreateAndStartAnimation(
      "cameraRadiusReset",
      u,
      "radius",
      60,
      120,
      u.radius,
      a,
      BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
    ),
      BABYLON.Animation.CreateAndStartAnimation(
        "cameraTargetReset",
        u,
        "target",
        60,
        120,
        u.target,
        s,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      ),
      BABYLON.Animation.CreateAndStartAnimation(
        "cameraAlphaReset",
        u,
        "alpha",
        60,
        120,
        u.alpha,
        n,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      ),
      BABYLON.Animation.CreateAndStartAnimation(
        "cameraBetaReset",
        u,
        "beta",
        60,
        120,
        u.beta,
        i,
        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
      ),
      console.log("Camera reset to initial position.");
  }
  function D(e) {
    return "Back" === e
      ? `
    <div class="card_cardContainer" data-test-id="${e}" tabindex="0">
      <div class="card_cardImageContainer">
        <!-- Back Design Images (Assuming 4 options) -->
        <img loading="lazy" class="card_cardImage image-jacket-back"  src="./assets/jacket/back/jacketback.png" alt="Classic Back">
        <!-- Show # of images if you like -->
        <div class="card_itemAmountContainer" data-test-id="item-amount">4</div>
      </div>
      <div class="card_cardDetails">
        <p class="card_cardText" data-test-id="card-text">${e}</p>
      </div>
      <div class="card_arrowIcon">
        <svg
          class="arrow-right"
          xmlns="http://www.w3.org/2000/svg"
          fill="#000000"
          viewBox="0 0 330 330"
          width="30"
          height="30"
        >
          <path
            d="M250.606,154.389l-150-149.996c-5.857-5.858-15.355-5.858-21.213,0.001  
               c-5.857,5.858-5.857,15.355,0.001,21.213l139.393,139.39L79.393,304.394  
               c-5.857,5.858-5.857,15.355,0.001,21.213  
               C82.322,328.536,86.161,330,90,330s7.678-1.464,10.607-4.394  
               l149.999-150.004c2.814-2.813,4.394-6.628,4.394-10.606  
               C255,161.018,253.42,157.202,250.606,154.389z"
          />
        </svg>
      </div>
    </div>
  `
      : "Lapels" === e
      ? `
    <div class="card_cardContainer" data-test-id="${e}" tabindex="0">
      <div class="card_cardImageContainer">
        <!-- Lapel Design Images (Assuming 3 options) -->
        <img loading="lazy" class="card_cardImage image-jacket-lapels"  src="./assets/jacket/lapel/jacketlapel.png" alt="Classic Lapel">
        <div class="card_itemAmountContainer" data-test-id="item-amount">3</div>
      </div>
      <div class="card_cardDetails">
        <p class="card_cardText" data-test-id="card-text">${e}</p>
      </div>
      <div class="card_arrowIcon">
        <svg
          class="arrow-right"
          xmlns="http://www.w3.org/2000/svg"
          fill="#000000"
          viewBox="0 0 330 330"
          width="30"
          height="30"
        >
          <path
            d="M250.606,154.389l-150-149.996c-5.857-5.858-15.355-5.858-21.213,0.001  
               c-5.857,5.858-5.857,15.355,0.001,21.213l139.393,139.39L79.393,304.394  
               c-5.857,5.858-5.857,15.355,0.001,21.213  
               C82.322,328.536,86.161,330,90,330s7.678-1.464,10.607-4.394  
               l149.999-150.004c2.814-2.813,4.394-6.628,4.394-10.606  
               C255,161.018,253.42,157.202,250.606,154.389z"
          />
        </svg>
      </div>
    </div>
  `
      : "Pockets" === e
      ? `
    <div class="card_cardContainer" data-test-id="${e}" tabindex="0">
      <div class="card_cardImageContainer">
        <!-- Pockets Design Images (Assuming 4 options) -->
        <img loading="lazy" class="card_cardImage image-jacket-pockets"  src="./assets/jacket/pockets/jacketpockets.png" alt="Single Pocket">
        <div class="card_itemAmountContainer" data-test-id="item-amount">8</div>
      </div>
      <div class="card_cardDetails">
        <p class="card_cardText" data-test-id="card-text">${e}</p>
      </div>
      <div class="card_arrowIcon">
        <svg
          class="arrow-right"
          xmlns="http://www.w3.org/2000/svg"
          fill="#000000"
          viewBox="0 0 330 330"
          width="30"
          height="30"
        >
          <path
            d="M250.606,154.389l-150-149.996c-5.857-5.858-15.355-5.858-21.213,0.001  
               c-5.857,5.858-5.857,15.355,0.001,21.213l139.393,139.39L79.393,304.394  
               c-5.857,5.858-5.857,15.355,0.001,21.213  
               C82.322,328.536,86.161,330,90,330s7.678-1.464,10.607-4.394  
               l149.999-150.004c2.814-2.813,4.394-6.628,4.394-10.606  
               C255,161.018,253.42,157.202,250.606,154.389z"
          />
        </svg>
      </div>
    </div>
  `
      : "Cut" === e
      ? `
    <div class="card_cardContainer" data-test-id="${e}" tabindex="0">
      <div class="card_cardImageContainer">
        <!-- 4 CUT IMAGES -->
        <img loading="lazy" class="card_cardImage image-pants-cut"  src="./assets/pants/cut/cut1.png" alt="Extra Slim">
        <img loading="lazy" class="card_cardImage image-pants-cut"  src="./assets/pants/cut/cut2.png" alt="Slim">
        <img loading="lazy" class="card_cardImage image-pants-cut"  src="./assets/pants/cut/cut3.png" alt="Straight">
        <img loading="lazy" class="card_cardImage image-pants-cut"  src="./assets/pants/cut/cut4.png" alt="Classic">
        <!-- Show # of images if you like -->
        <div class="card_itemAmountContainer" data-test-id="item-amount">4</div>
      </div>
      <div class="card_cardDetails">
        <p class="card_cardText" data-test-id="card-text">${e}</p>
      </div>
      <div class="card_arrowIcon">
        <svg
          class="arrow-right"
          xmlns="http://www.w3.org/2000/svg"
          fill="#000000"
          viewBox="0 0 330 330"
          width="30"
          height="30"
        >
          <path
            d="M250.606,154.389l-150-149.996c-5.857-5.858-15.355-5.858-21.213,0.001  
               c-5.857,5.858-5.857,15.355,0.001,21.213l139.393,139.39L79.393,304.394  
               c-5.857,5.858-5.857,15.355,0.001,21.213  
               C82.322,328.536,86.161,330,90,330s7.678-1.464,10.607-4.394  
               l149.999-150.004c2.814-2.813,4.394-6.628,4.394-10.606  
               C255,161.018,253.42,157.202,250.606,154.389z"
          />
        </svg>
      </div>
    </div>
  `
      : "Pleat" === e
      ? `
    <div class="card_cardContainer" data-test-id="${e}" tabindex="0">
      <div class="card_cardImageContainer">
        <!-- 5 PLEAT IMAGES -->
        <img loading="lazy" class="card_cardImage image-pants-pleat"  src="./assets/pants/pleat/pleat1.png" alt="Pleat 1">
        <img loading="lazy" class="card_cardImage image-pants-pleat"  src="./assets/pants/pleat/pleat2.png" alt="Pleat 2">
        <img loading="lazy" class="card_cardImage image-pants-pleat"  src="./assets/pants/pleat/pleat3.png" alt="Pleat 3">
        <img loading="lazy" class="card_cardImage image-pants-pleat"  src="./assets/pants/pleat/pleat4.png" alt="Pleat 4">
 
        <!-- Show # of images if you like -->
        <div class="card_itemAmountContainer" data-test-id="item-amount">5</div>
      </div>
      <div class="card_cardDetails">
        <p class="card_cardText" data-test-id="card-text">${e}</p>
      </div>
      <div class="card_arrowIcon">
        <svg
          class="arrow-right"
          xmlns="http://www.w3.org/2000/svg"
          fill="#000000"
          viewBox="0 0 330 330"
          width="30"
          height="30"
        >
          <path
            d="M250.606,154.389l-150-149.996c-5.857-5.858-15.355-5.858-21.213,0.001  
               c-5.857,5.858-5.857,15.355,0.001,21.213l139.393,139.39L79.393,304.394  
               c-5.857,5.858-5.857,15.355,0.001,21.213  
               C82.322,328.536,86.161,330,90,330s7.678-1.464,10.607-4.394  
               l149.999-150.004c2.814-2.813,4.394-6.628,4.394-10.606  
               C255,161.018,253.42,157.202,250.606,154.389z"
          />
        </svg>
      </div>
    </div>
  `
      : `
  <div class="card_cardContainer" data-test-id="${e}" tabindex="0">
    <div class="card_cardImageContainer">
      <!-- Default Images -->
      <img loading="lazy" class="card_cardImage"  src="./batch1/E5101-38.png" alt="E5101-38">
      <img loading="lazy" class="card_cardImage"  src="./batch1/E5102-38.png" alt="E5102-38">
      <img loading="lazy" class="card_cardImage"  src="./batch1/E5103-38.png" alt="E5103-38">
      <img loading="lazy" class="card_cardImage"  src="./batch1/E5104-38.png" alt="E5104-38">
      <div class="card_itemAmountContainer" data-test-id="item-amount">25</div>
    </div>
    <div class="card_cardDetails">
      <p class="card_cardText" data-test-id="card-text">${e}</p>
    </div>
    <div class="card_arrowIcon">
      <svg
        class="arrow-right"
        xmlns="http://www.w3.org/2000/svg"
        fill="#000000"
        viewBox="0 0 330 330"
        width="30"
        height="30"
      >
        <path
          d="M250.606,154.389l-150-149.996c-5.857-5.858-15.355-5.858-21.213,0.001  
             c-5.857,5.858-5.857,15.355,0.001,21.213l139.393,139.39L79.393,304.394  
             c-5.857,5.858-5.857,15.355,0.001,21.213  
             C82.322,328.536,86.161,330,90,330s7.678-1.464,10.607-4.394  
             l149.999-150.004c2.814-2.813,4.394-6.628,4.394-10.606  
             C255,161.018,253.42,157.202,250.606,154.389z"
        />
      </svg>
    </div>
  </div>
`;
  }
  function F() {
    let e = document.querySelector("#sidePanel .back-button");
    if (!e) {
      (e = document.createElement("button")).classList.add("back-button"),
        (e.style.marginBottom = "20px"),
        (e.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
<circle cx="9" cy="9" r="9" fill="#EFEFEF"/>
<path d="M4.64645 8.64645C4.45118 8.84171 4.45118 9.15829 4.64645 9.35355L7.82843 12.5355C8.02369 12.7308 8.34027 12.7308 8.53553 12.5355C8.7308 12.3403 8.7308 12.0237 8.53553 11.8284L5.70711 9L8.53553 6.17157C8.7308 5.97631 8.7308 5.65973 8.53553 5.46447C8.34027 5.2692 8.02369 5.2692 7.82843 5.46447L4.64645 8.64645ZM13 8.5L5 8.5L5 9.5L13 9.5L13 8.5Z" fill="black"/>
</svg>
     Back
    `),
        e.addEventListener("click", () => {
          J((o = 2)), e.remove();
        });
      let t = document.getElementById("sidePanel");
      t
        ? t.appendChild(e)
        : (console.warn(
            "#sidePanel element not found. Appending to textureContainer instead."
          ),
          textureContainer.appendChild(e));
    }
  }
  function V() {
    console.log(
      "[showMobileLapelsOptions] Displaying lapels design options..."
    );
    let e = document.getElementById("textureContainer");
    e.innerHTML = "";
    let t = document.createElement("button");
    (t.textContent = "Confirm Lapels Selection"),
      t.classList.add("back-to-cat"),
      t.addEventListener("click", () => {
        console.log("[showMobileLapelsOptions] Confirm clicked => returning"),
          X();
      }),
      e.appendChild(t);
    let a = document.createElement("div");
    (a.id = "mobileLapelsSlider"), a.classList.add("slider-container");
    let s = document.createElement("div");
    s.classList.add("cards-wrapper"),
      [
        {
          src: "./assets/jacket/lapel/jacketlapel.png",
          label: "Classic Lapel",
          meshName: "4on2_Lapels_1",
        },
        {
          src: "./assets/jacket/lapel/jacketlapel.png",
          label: "Slim Lapel",
          meshName: "4on2_Lapels_2",
        },
        {
          src: "./assets/jacket/lapel/jacketlapel.png",
          label: "Wide Lapel",
          meshName: "4on2_Lapels_3",
        },
      ].forEach((e) => {
        let t = document.createElement("div");
        t.classList.add("part-option", "card_cardContainer"),
          t.setAttribute("data-part-name", "Lapels"),
          t.setAttribute("data-mesh-name", e.meshName),
          (t.style.touchAction = "pan-y"),
          (t.style.cursor = "pointer");
        let a = document.createElement("div");
        a.classList.add("img-wrapper"), (a.style.touchAction = "pan-y");
        let n = document.createElement("img");
        (n.src = e.src),
          (n.alt = e.label),
          (n.style.touchAction = "pan-y"),
          (n.style.width = "100%"),
          (n.style.height = "auto"),
          a.appendChild(n);
        let i = document.createElement("p");
        (i.textContent = e.label),
          (i.style.touchAction = "pan-y"),
          t.appendChild(a),
          t.appendChild(i),
          t.addEventListener("click", () => {
            console.log(
              "[showMobileLapelsOptions] Chosen lapels option:",
              e.label
            ),
              s.querySelectorAll(".part-option").forEach((e) => {
                e.classList.remove("selected");
              }),
              t.classList.add("selected"),
              (l.design.jacket.Lapels = e.meshName),
              eo("Lapels", e.meshName);
          }),
          s.appendChild(t);
      }),
      a.appendChild(s),
      e.appendChild(a);
  }
  function R() {
    console.log("[showMobileBackOptions] Displaying back view options...");
    let e = document.getElementById("textureContainer");
    e.innerHTML = "";
    let t = document.createElement("button");
    (t.textContent = "Confirm Back Selection"),
      t.classList.add("back-to-cat"),
      t.addEventListener("click", () => {
        console.log(
          "[showMobileBackOptions] Confirm button clicked => returning"
        ),
          X();
      }),
      e.appendChild(t);
    let a = document.createElement("div");
    (a.id = "mobileBackSlider"),
      a.classList.add("slider-container"),
      [
        {
          src: "./assets/jacket/back/jacketback.png",
          label: "Back Option 1",
          meshName: "4on2_Back_1",
        },
        {
          src: "./assets/jacket/back/jacketback.png",
          label: "Back Option 2",
          meshName: "4on2_Back_2",
        },
        {
          src: "./assets/jacket/back/jacketback.png",
          label: "Back Option 3",
          meshName: "4on2_Back_3",
        },
      ].forEach((e) => {
        let t = document.createElement("div");
        t.classList.add("part-option"),
          t.setAttribute("data-part-name", "Back"),
          t.setAttribute("data-mesh-name", e.meshName),
          (t.style.touchAction = "pan-y"),
          (t.style.cursor = "pointer");
        let s = document.createElement("div");
        s.classList.add("img-wrapper"), (s.style.touchAction = "pan-y");
        let n = document.createElement("img");
        (n.src = e.src),
          (n.alt = e.label),
          (n.style.touchAction = "pan-y"),
          (n.style.width = "100%"),
          (n.style.height = "auto"),
          s.appendChild(n);
        let i = document.createElement("p");
        (i.textContent = e.label),
          (i.style.touchAction = "pan-y"),
          t.appendChild(s),
          t.appendChild(i),
          t.addEventListener("click", () => {
            console.log("[showMobileBackOptions] Chosen back option:", e.label),
              a.querySelectorAll(".part-option").forEach((e) => {
                e.classList.remove("selected");
              }),
              t.classList.add("selected"),
              (l.design.jacket.Back = e.meshName),
              eo("Back", e.meshName);
          }),
          a.appendChild(t);
      }),
      e.appendChild(a),
      W("#mobileBackSlider");
  }
  function W(e) {
    let t = document.querySelector(e);
    if (!t) {
      console.error(`Slider container "${e}" not found.`);
      return;
    }
    let a = t.querySelector(".cards-wrapper");
    if (!a) {
      console.error(`"cards-wrapper" not found within "${e}".`);
      return;
    }
    let s = gsap.utils.toArray(".part-option.card_cardContainer", a);
    if (0 === s.length) {
      console.error("No cards found within the slider.");
      return;
    }
    em(s, { paused: !0, draggable: !0, speed: 2, snap: 1, repeat: -1 }),
      (a.dataset.sliderInitialized = "true");
  }
  function U() {
    console.log(
      "[showMobilePocketsOptions] Displaying pocket design options..."
    );
    let e = document.getElementById("textureContainer");
    e.innerHTML = "";
    let t = document.createElement("button");
    (t.textContent = "Confirm Pockets Selection"),
      t.classList.add("back-to-cat"),
      t.addEventListener("click", () => {
        console.log(
          "[showMobilePocketsOptions] Confirm button clicked => returning"
        ),
          X();
      }),
      e.appendChild(t);
    let a = document.createElement("div");
    (a.id = "mobilePocketsSlider"), a.classList.add("slider-container");
    let s = document.createElement("div");
    s.classList.add("cards-wrapper"),
      [
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Single Pocket",
          meshName: "4on2_pocket_1",
        },
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Double Pocket",
          meshName: "4on2_pocket_2",
        },
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Patch Pocket",
          meshName: "4on2_pocket_3",
        },
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Flap Pocket",
          meshName: "4on2_pocket_4",
        },
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Ticket Pocket",
          meshName: "4on2_pocket_5",
        },
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Slash Pocket",
          meshName: "4on2_pocket_6",
        },
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Welt Pocket",
          meshName: "4on2_pocket_7",
        },
        {
          src: "assets/jacket/pockets/jacketpockets.png",
          label: "Jetted Pocket",
          meshName: "4on2_pocket_8",
        },
      ].forEach((e) => {
        let t = document.createElement("div");
        t.classList.add("part-option", "card_cardContainer"),
          t.setAttribute("data-part-name", "Pockets"),
          t.setAttribute("data-mesh-name", e.meshName),
          (t.style.touchAction = "pan-y"),
          (t.style.cursor = "pointer");
        let a = document.createElement("div");
        a.classList.add("img-wrapper"), (a.style.touchAction = "pan-y");
        let n = document.createElement("img");
        (n.src = e.src),
          (n.alt = e.label),
          (n.style.touchAction = "pan-y"),
          (n.style.width = "100%"),
          (n.style.height = "auto"),
          a.appendChild(n);
        let i = document.createElement("p");
        (i.textContent = e.label),
          (i.style.touchAction = "pan-y"),
          t.appendChild(a),
          t.appendChild(i),
          t.addEventListener("click", () => {
            console.log(
              "[showMobilePocketsOptions] Chosen pocket option:",
              e.label
            ),
              s.querySelectorAll(".part-option").forEach((e) => {
                e.classList.remove(
                  "selected",
                  "selected-top-pocket",
                  "selected-bottom-pocket"
                );
              }),
              t.classList.add("selected"),
              (l.design.jacket.Pockets = e.meshName),
              eo("Pockets", e.meshName);
          }),
          s.appendChild(t);
      }),
      a.appendChild(s),
      e.appendChild(a),
      W("#mobilePocketsSlider");
  }
  function X() {
    let e = document.getElementById("textureContainer");
    if (
      ((e.innerHTML = ""),
      F(),
      window.matchMedia("(max-width: 1024.9px)").matches)
    ) {
      let t = "";
      ["Back", "Lapels", "Pockets"].forEach((e) => {
        t += D(e);
      }),
        (e.innerHTML += `
      <div class="cards-wrapper design-options">
        ${t}
      </div>
    `);
      let a = e.querySelectorAll(".design-options .card_cardContainer");
      a.forEach((e) => {
        e.addEventListener("click", () => {
          let t = e.getAttribute("data-test-id");
          console.log(`Clicked on jacket part: ${t}`),
            "Back" === t ? R() : "Lapels" === t ? V() : "Pockets" === t && U();
        });
      });
    } else {
      let s = "";
      ["Back", "Lapels", "Pockets"].forEach((e) => {
        s += D(e);
      }),
        (e.innerHTML += `
      <div class="controls">
        <button class="prevButton">Prev</button>
        <button class="nextButton">Next</button>
      </div>
      <div class="cards-wrapper design-options">
        ${s}
      </div>
    `);
      let n = e.querySelectorAll(".design-options .card_cardContainer");
      n.forEach((e) => {
        e.addEventListener("click", () => {
          let t = e.getAttribute("data-test-id");
          console.log(`Clicked on jacket part: ${t}`),
            "Back" === t ? R() : "Lapels" === t ? V() : "Pockets" === t && U();
        });
      });
    }
  }
  function G() {
    let e = document.getElementById("textureContainer");
    if (
      ((e.innerHTML = ""),
      F(),
      window.matchMedia("(max-width: 1024.9px)").matches)
    ) {
      let t = "";
      ["Cut", "Pleat"].forEach((e) => {
        t += D(e);
      }),
        (e.innerHTML += `
      <div class="design-options">${t}</div>
    `);
      let a = document.querySelectorAll(".design-options .card_cardContainer");
      a.forEach((e) => {
        e.addEventListener("click", () => {
          let t = e.getAttribute("data-test-id");
          console.log("Clicked Pants Part (mobile):", t),
            "Cut" === t
              ? Q()
              : "Pleat" === t &&
                (function e() {
                  console.log(
                    "[showMobilePleatOptions] Displaying pleat options..."
                  );
                  let t = document.getElementById("textureContainer");
                  t.innerHTML = "";
                  let a = document.createElement("button");
                  (a.textContent = "Confirm Pleat Choice"),
                    a.classList.add("back-to-cat"),
                    a.addEventListener("click", () => {
                      console.log(
                        "[showMobilePleatOptions] Confirm clicked => returning"
                      ),
                        G();
                    }),
                    t.appendChild(a);
                  let s = document.createElement("div");
                  (s.id = "mobilePleatSlider"),
                    s.classList.add("slider-container");
                  let n = document.createElement("div");
                  n.classList.add("cards-wrapper"),
                    s.appendChild(n),
                    [
                      {
                        src: "./assets/pants/pleat/pleat1.png",
                        label: "Pleat 1",
                      },
                      {
                        src: "./assets/pants/pleat/pleat2.png",
                        label: "Pleat 2",
                      },
                      {
                        src: "./assets/pants/pleat/pleat3.png",
                        label: "Pleat 3",
                      },
                      {
                        src: "./assets/pants/pleat/pleat4.png",
                        label: "Pleat 4",
                      },
                      {
                        src: "./assets/pants/pleat/pleat5.png",
                        label: "Pleat 5",
                      },
                    ].forEach((e) => {
                      let t = document.createElement("div");
                      t.classList.add("card_cardContainer", "part-option"),
                        t.setAttribute("data-part-name", "Pleat"),
                        t.setAttribute("data-mesh-name", e.label),
                        (t.tabIndex = 0),
                        (t.style.touchAction = "pan-y"),
                        (t.style.cursor = "pointer");
                      let a = document.createElement("div");
                      a.classList.add("img-wrapper"),
                        (a.style.touchAction = "pan-y");
                      let s = document.createElement("img");
                      (s.src = e.src),
                        (s.alt = e.label),
                        (s.style.touchAction = "pan-y"),
                        (s.style.width = "100%"),
                        (s.style.height = "auto"),
                        a.appendChild(s);
                      let i = document.createElement("p");
                      (i.textContent = e.label),
                        (i.style.touchAction = "pan-y"),
                        t.appendChild(a),
                        t.appendChild(i),
                        t.addEventListener("click", () => {
                          console.log(
                            "[showMobilePleatOptions] Chosen pleat:",
                            e.label
                          ),
                            n.querySelectorAll(".part-option").forEach((e) => {
                              e.classList.remove("selected");
                            }),
                            t.classList.add("selected"),
                            (l.design.pants.pleat = e.label),
                            eo("Pleat", e.label);
                        }),
                        n.appendChild(t);
                    }),
                    t.appendChild(s),
                    W("#mobilePleatSlider");
                })();
        });
      });
    } else
      (e.innerHTML += `
      <button class="accordion" data-category="pants">
        Pants <span class="sign-acc">+</span>
      </button>
      <div class="panel" style="max-height: 0px;">
        <button class="sub_accordion" data-category="cut">
          Cut <span class="sign-acc">+</span>
        </button>
        <div class="sub_panel">
          <!-- your existing "cut" content -->
        </div>
        <button class="sub_accordion" data-category="pleat">
          Pleat <span class="sign-acc">+</span>
        </button>
        <div class="sub_panel">
          <!-- etc. -->
        </div>
        <!-- Add more sub-accordions if needed -->
      </div>
    `),
        B();
  }
  function Y() {
    (m.rotation.y = Math.PI / 2), q();
  }
  function J(e) {
    !(function e(t) {
      let a = window.matchMedia("(max-width: 1024.9px)").matches;
      if (!a) return;
      let s = document.getElementById("textureContainer");
      if (!s) {
        console.error("Element with ID 'textureContainer' not found.");
        return;
      }
      s.classList.remove(...["step-1", "step-2", "step-3", "step-4", "step-5"]),
        t >= 1 && t <= 5
          ? (s.classList.add(`step-${t}`),
            console.log(`Added class: step-${t}`))
          : console.warn(`Invalid step number: ${t}. Must be between 1 and 5.`);
    })(e);
    let t = document.getElementById("stepTitle"),
      a = document.getElementById("textureContainer"),
      s = document.getElementById("batchSelector"),
      n = document.querySelector("#sidePanel .back-button");
    switch (
      (n &&
        (n.remove(),
        console.log("[initializeStep] Existing back button removed.")),
      (t.innerHTML = ""),
      o)
    ) {
      case 1:
        (t.innerHTML = `
        <p>Here we’ve curated a selection of fabrics that best suits you.</p>
        <p>Please choose your preferred fabric group from the options below to proceed to the next step.</p>
      `),
          (s.style.display = "none"),
          et(),
          (function e() {
            let t = document.getElementById("textureContainer");
            t.innerHTML = "";
            let a = document.createElement("div"),
              s = document.createElement("div");
            (a.className = "cards-wrapper"),
              (s.className = "cards-wrapper-container");
            let n = r["1"];
            if (
              (Object.keys(r).forEach((t, s) => {
                let i = (function t(a, s, n) {
                  let i = document.createElement("div");
                  (i.className = "card_cardContainer"),
                    (i.dataset.testId = a),
                    (i.tabIndex = n + 1);
                  let o = document.createElement("div");
                  o.className = "card_cardImageContainer";
                  let c = r["1"].slice(0, 4);
                  c.forEach((e) => {
                    let t = document.createElement("img");
                    (t.className = "card_cardImage"),
                      (t.loading = "lazy"),
                      (t.src = `./batch1/${e}.png`),
                      (t.alt = e),
                      o.appendChild(t);
                  });
                  let d = document.createElement("div");
                  (d.className = "card_itemAmountContainer"),
                    (d.dataset.testId = "item-amount"),
                    (d.textContent = r["1"].length),
                    o.appendChild(d);
                  let p = document.createElement("div");
                  p.className = "card_cardDetails";
                  let m = document.createElement("p");
                  (m.className = "card_cardText"),
                    (m.dataset.testId = "card-text"),
                    (m.textContent = `Category ${a}`),
                    p.appendChild(m);
                  let u = document.createElement("div");
                  return (
                    (u.className = "card_arrowIcon"),
                    (u.innerHTML = `<svg class="arrow-right" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="800px" width="800px" version="1.1" id="Layer_1" viewBox="0 0 330 330" xml:space="preserve">
    <path id="XMLID_222_" d="M250.606,154.389l-150-149.996c-5.857-5.858-15.355-5.858-21.213,0.001  
       c-5.857,5.858-5.857,15.355,0.001,21.213l139.393,139.39L79.393,304.394c-5.857,5.858-5.857,15.355,0.001,21.213  
       C82.322,328.536,86.161,330,90,330s7.678-1.464,10.607-4.394  
       l149.999-150.004c2.814-2.813,4.394-6.628,4.394-10.606  
       C255,161.018,253.42,157.202,250.606,154.389z"/>
  </svg>`),
                    i.appendChild(o),
                    i.appendChild(p),
                    i.appendChild(u),
                    i.addEventListener("click", () => {
                      (function t(a) {
                        let s = document.getElementById("textureContainer");
                        s.innerHTML = "";
                        let n = document.createElement("button");
                        (n.textContent = "Confirm"),
                          n.classList.add("back-to-cat"),
                          n.addEventListener("click", () => {
                            e();
                          }),
                          s.appendChild(n);
                        let i = r["1"],
                          o = document.createElement("div");
                        if (
                          ((o.className = "cards-wrapper"),
                          i.forEach((e, t) => {
                            let s = (function e(t, a, s) {
                              var n;
                              let i = document.createElement("div");
                              (i.className = "card_cardContainer card_small"),
                                (i.dataset.testId = s),
                                (i.tabIndex = s + 1);
                              let r = document.createElement("div");
                              r.className = "card_cardImageContainer";
                              let o = document.createElement("img");
                              (o.className = "card_cardImage"),
                                (o.loading = "lazy"),
                                (o.src = `./batch1/${a}.png`),
                                (o.alt = a),
                                r.appendChild(o);
                              let l = document.createElement("div");
                              (l.className =
                                "card_infoSpaceContainer card_dark"),
                                (l.dataset.testId = "info-btn"),
                                (l.innerHTML =
                                  '<p class="susu-pcons" translate="no">info</p>'),
                                r.appendChild(l);
                              let c = document.createElement("div");
                              c.className =
                                "card_cardDetails card_hideMobileInfoText";
                              let d = document.createElement("div");
                              (d.className = "card_cardText"),
                                (d.dataset.testId = "card-text"),
                                (d.textContent =
                                  ((n = a),
                                  n.replace(/_/g, " ").replace(".png", "")));
                              let p = document.createElement("div");
                              return (
                                (p.className = "card_cardSubText"),
                                (p.dataset.testId = "card-subtext"),
                                (p.textContent = "$0.00"),
                                c.appendChild(d),
                                c.appendChild(p),
                                i.appendChild(r),
                                i.appendChild(c),
                                i.addEventListener("click", (e) => {
                                  e.stopPropagation(), Z(t, a, i);
                                }),
                                i
                              );
                            })(a, e, t);
                            o.appendChild(s);
                          }),
                          s.appendChild(o),
                          eg(),
                          l.texture)
                        ) {
                          let c = l.texture.replace(".png", ""),
                            d = s.querySelector(`img[alt="${c}"]`);
                          d && d.classList.add("selected");
                        } else if (i.length > 0) {
                          let p = i[0],
                            m = s.querySelector(".card_cardContainer");
                          if (m) {
                            let u = m.querySelector(".card_cardImage");
                            if (u) {
                              u.classList.add("selected");
                              let g = Object.keys(r)[0];
                              Z(g, p, m);
                            }
                          }
                        }
                      })(a);
                    }),
                    i
                  );
                })(t, n, s);
                a.appendChild(i);
              }),
              t.appendChild(s),
              t.appendChild(a),
              eg(),
              l.texture)
            ) {
              let i = l.texture.replace(".png", ""),
                o = t.querySelector(`img[alt="${i}"]`);
              o && o.classList.add("selected");
            } else if (n.length > 0) {
              let c = n[0],
                d = t.querySelector(".card_cardContainer");
              if (d) {
                let p = d.querySelector(".card_cardImage");
                if (p) {
                  p.classList.add("selected");
                  let m = Object.keys(r)[0];
                  Z(m, c, d);
                }
              }
            }
          })(),
          window.matchMedia("(max-width: 1024.9px)").matches,
          (a.style.display = "flex"),
          q(),
          Y();
        break;
      case 2:
        if (
          ((t.innerHTML = `
          <p>Great choice!</br>Now, let’s move on to designing your garment.</p>
        `),
          (s.style.display = "none"),
          (a.style.display = "flex"),
          a.classList.add("texture-container"),
          window.matchMedia("(max-width: 1024.9px)").matches)
        ) {
          (t.innerHTML += `
            <p>Please choose which garment to design first:</p>
          `),
            (a.innerHTML = `
            <div id="chooseGarmentContainer" style="display: flex; gap: 20px;">
              <div class="card_cardContainer" data-test-id="chooseJacket" tabindex="0">
                <div class="card_cardImageContainer">
                  <img loading="lazy" class="card_cardImage"  src="./assets/jacketandpants/jacket.png" alt="Jacket">
                  <div class="card_itemAmountContainer" data-test-id="item-amount">Jacket</div>
                </div>
                <div class="card_cardDetails">
                  <p class="card_cardText" data-test-id="card-text">Design Jacket</p>
                </div>
              </div>
              <div class="card_cardContainer" data-test-id="choosePants" tabindex="0">
                <div class="card_cardImageContainer">
                  <img loading="lazy" class="card_cardImage"  src="assets/jacketandpants/pant.png" alt="Pants">
                  <div class="card_itemAmountContainer" data-test-id="item-amount">Pants</div>
                </div>
                <div class="card_cardDetails">
                  <p class="card_cardText" data-test-id="card-text">Design Pants</p>
                </div>
              </div>
            </div>
          `);
          let i = document.querySelector('[data-test-id="chooseJacket"]'),
            c = document.querySelector('[data-test-id="choosePants"]');
          i &&
            i.addEventListener("click", () => {
              X();
            }),
            c &&
              c.addEventListener("click", () => {
                G();
              });
        } else {
          var d;
          (t.innerHTML += `
            <p>Choose from the available options for each key design feature. Let’s start creating your perfect look!</p>
          `),
            (a.innerHTML = `
            <button class="accordion" data-category="jacket">
              Jacket <span class="sign-acc">+</span>
            </button>
            <div class="panel" style="max-height: 0px;">
              ${
                ((d = [
                  { partName: "Back", options: b.Back },
                  { partName: "Lapels", options: b.Lapels },
                  { partName: "Pockets", options: b.Pockets },
                ]),
                d
                  .map((e) => {
                    if ("Pockets" === e.partName) {
                      let t = e.options.filter((e) =>
                          [
                            "4on2_pocket_4",
                            "4on2_pocket_5",
                            "4on2_pocket_6",
                          ].includes(e)
                        ),
                        a = e.options.filter((e) =>
                          [
                            "4on2_pocket_1",
                            "4on2_pocket_2",
                            "4on2_pocket_3",
                            "4on2_pocket_7",
                            "4on2_pocket_8",
                          ].includes(e)
                        );
                      return `
          <div class="part-item" data-part="${e.partName}">
            ${e.partName}
            <div class="part-options">
              <!-- Top Pockets Section -->
              <div class="sub-part top-pockets">
                <h4>Top Pockets</h4>
                ${t
                  .map(
                    (
                      e,
                      t
                    ) => `<button class="part-option" data-part-name="Pockets" data-mesh-name="${e}">
                        Pockets Option ${t + 1}
                      </button>`
                  )
                  .join("")}
              </div>
              <!-- Bottom Pockets Section -->
              <div class="sub-part bottom-pockets">
                <h4>Bottom Pockets</h4>
                ${a
                  .map(
                    (
                      e,
                      t
                    ) => `<button class="part-option" data-part-name="Pockets" data-mesh-name="${e}">
                        Pockets Option ${t + 1}
                      </button>`
                  )
                  .join("")}
              </div>
            </div>
          </div>
        `;
                    }
                    return e.options && e.options.length > 1
                      ? `
          <div class="part-item" data-part="${e.partName}">
            ${e.partName}
            <div class="part-options">
              ${e.options
                .map(
                  (t, a) => `<button class="part-option" data-part-name="${
                    e.partName
                  }" data-mesh-name="${t}">
                      ${e.partName} Option ${a + 1}
                    </button>`
                )
                .join("")}
            </div>
          </div>
        `
                      : `<div class="part-item" data-part="${e.partName}">${e.partName}</div>`;
                  })
                  .join(""))
              }
            </div>

            <button class="accordion" data-category="pants">
              Pants <span class="sign-acc">+</span>
            </button>
            <div class="panel" style="max-height: 0px;">
              <button class="sub_accordion" data-category="cut">
                Cut <span class="sign-acc">+</span>
              </button>
              <div class="sub_panel">
                <!-- 8 images for Cut -->
                <div id="pantsCutContainer" style="display: flex; flex-wrap: wrap; gap: 1rem;">
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut1.png" alt="Extra Slim">
                    <p>Extra Slim</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut2.png" alt="Slim">
                    <p>Slim</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut3.png" alt="Straight">
                    <p>Straight</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut4.png" alt="Classic">
                    <p>Classic</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut5.png" alt="Relaxed Fit">
                    <p>Relaxed Fit</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut6.png" alt="Tapered Leg">
                    <p>Tapered Leg</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut7.png" alt="Flat Front">
                    <p>Flat Front</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut8.png" alt="Pleated Front">
                    <p>Pleated Front</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut9.png" alt="High waist">
                    <p>High waist</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/cut/cut10.png" alt="Low rise">
                    <p>Low rise</p>
                  </div>
                </div>
              </div>

              <button class="sub_accordion" data-category="pleat">
                Pleat <span class="sign-acc">+</span>
              </button>
              <div class="sub_panel">
                 <div id="pantsCutContainer" style="display: flex; flex-wrap: wrap; gap: 1rem;">
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/pleat/pleat1.png" alt="pleat">
                    <p>pleat</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/pleat/pleat2.png" alt="pleat">
                    <p>pleat</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/pleat/pleat3.png" alt="pleat">
                    <p>pleat</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/pleat/pleat4.png" alt="pleat">
                    <p>pleat</p>
                  </div>
                  <div class="pants-item">
                    <img loading="lazy" src="./assets/pants/pleat/pleat5.png" alt="pleat">
                    <p>pleat</p>
                  </div>
                </div>
              </div>
            </div>
          `),
            B();
        }
        q(), Y();
        break;
      case 3:
        t.innerHTML = `
        <p>Now it’s time to add a personal touch to your garment!</p>
        <p>You can customize your suit with embroidery. Please select your preferred locations for the embroidery or choose "No Embroidery" to skip.</p>
      `;
        let p = window.matchMedia("(max-width: 1024.9px)").matches,
          m = `
        <h2 class="text-step3">Jacket Embroidery Locations</h2>
        <div id="embroideryLocationsContainer">
          <!-- Embroidery Choices -->
          <div class="choice-container-step3" id="embroideryChoices">
            <div class="jacket-embroidery-choice">
              <img loading="lazy" src="./assets/embroidery/behind-your-lapel.png" alt="Inner right chest pocket"/>
              <p>Inner right chest pocket</p>
            </div>
            <div class="jacket-embroidery-choice">
              <img loading="lazy" src="./assets/embroidery/inner-left-embroidery.png" alt="Inner left chest pocket"/>
              <p>Inner left chest pocket</p>
            </div>
            <div class="jacket-embroidery-choice">
              <img loading="lazy" src="./assets/embroidery/inner-right-embroidery.png" alt="Under the collar flap"/>
              <p>Under the collar flap</p>
            </div>
            <!-- "No Embroidery" Option -->
            <div class="jacket-embroidery-choice no-embroidery">
              <img loading="lazy" src="./assets/rectangle_115.webp" alt="No Embroidery"/>
              <p>No Embroidery</p>
            </div>
          </div>
      `;
        if (
          (p &&
            (m += `
          <!-- Color Choices (created only on mobile) -->
          <div class="color-options hidden" id="colorChoices">
            <button class="color-option" data-color="#FF0000" style="background-color: #7A1313;"></button>
            <button class="color-option" data-color="#00FF00" style="background-color: #000000;"></button>
            <button class="color-option" data-color="#0000FF" style="background-color: #FFFFFF;"></button>
          </div>
        `),
          (m += "</div>"),
          p &&
            (m += `
          <div class="mobile-embroidery-buttons">
            <button id="locationButton" class="embroidery-button">Location</button>
            <button id="colorButton" class="embroidery-button">Color</button>
            <button id="charactersButton" class="embroidery-button">Characters</button>
          </div>
        `),
          (a.innerHTML = m),
          l.embroidery.jacket.length > 0)
        )
          l.embroidery.jacket.forEach((e) => {
            let t = Array.from(
              document.querySelectorAll(".jacket-embroidery-choice")
            ).find((t) => t.querySelector("p").innerText.trim() === e.location);
            t && t.classList.add("selected");
          });
        else {
          let u = document.querySelector(
            ".jacket-embroidery-choice.no-embroidery"
          );
          u && u.classList.add("selected");
        }
        window.matchMedia("(max-width: 1024.9px)").matches &&
          (function e() {
            let t = document.getElementById("locationButton"),
              a = document.getElementById("colorButton"),
              s = document.getElementById("charactersButton"),
              n = document.getElementById("embroideryChoices"),
              i = [t, a, s];
            function r(e) {
              i.forEach((e) => e?.classList.remove("active")),
                e.classList.add("active");
            }
            t &&
              t.addEventListener("click", () => {
                r(t),
                  (document.querySelector("#stepTitle").style.display = "none");
                let e = document.getElementById("colorChoices"),
                  a = document.querySelector(".characters-inputs");
                n && n.classList.remove("hidden"),
                  e && e.classList.add("hidden"),
                  a && (a.style.display = "none");
              }),
              a &&
                a.addEventListener("click", () => {
                  r(a),
                    (document.querySelector("#stepTitle").style.display =
                      "none");
                  let e = document.getElementById("colorChoices"),
                    t = document.querySelector(".characters-inputs");
                  n && n.classList.add("hidden"),
                    e && e.classList.remove("hidden"),
                    t && (t.style.display = "none");
                }),
              s &&
                s.addEventListener("click", () => {
                  r(s),
                    (document.querySelector("#stepTitle").style.display =
                      "none"),
                    n && n.classList.add("hidden");
                  let e = document.getElementById("colorChoices");
                  e && e.classList.add("hidden");
                  let t = l.embroidery.jacket;
                  if (0 === t.length) {
                    alert("No embroidery locations chosen.");
                    return;
                  }
                  e$();
                  let a = document.querySelector(".characters-inputs");
                  a && (a.style.display = "block");
                }),
              document.addEventListener("click", (e) => {
                if (
                  !k &&
                  !(k = document.getElementById("embroideryLocationsContainer"))
                ) {
                  console.error(
                    "Element with ID 'embroideryLocationsContainer' not found."
                  );
                  return;
                }
                let i =
                  k.contains(e.target) ||
                  (t && t.contains(e.target)) ||
                  (a && a.contains(e.target)) ||
                  (s && s.contains(e.target));
                if (!i) {
                  n.classList.add("hidden");
                  let r = document.getElementById("colorChoices");
                  r && r.classList.add("hidden");
                }
              });
          })(),
          et(!1),
          $.forEach((e) => e.setEnabled(!0)),
          _.removeAllMeshes(),
          H([...g, ...$]),
          q(),
          (cameraLocked = !1),
          Y();
        break;
      case 4:
        if (
          window.matchMedia("(max-width: 1024.9px)").matches ||
          !l.embroidery.jacket ||
          0 === l.embroidery.jacket.length
        ) {
          J((o = 5));
          return;
        }
        (t.innerHTML = `
        <p>Customize your jacket embroidery!</p>
        <p>Please enter your desired text and select your preferred color for each embroidery location.</p>
      `),
          (s.style.display = "none"),
          (a.style.display = "flex"),
          (a.style.padding = "0 20px"),
          (a.style.justifyContent = "start"),
          (a.innerHTML = `
        <h2 class="text-step3 step4 embroidery">Jacket Embroidery Customization</h2>
        <div id="embroideryCustomizationContainer"></div>
      `);
        let h = document.getElementById("embroideryCustomizationContainer");
        l.embroidery.jacket.forEach((e, t) => {
          h.innerHTML += `
          <div class="embroidery-customization" data-index="${t}">
            <h3>Embroidery ${t + 1}: ${e.location}</h3>
            <button class="remove-embroidery-button" data-index="${t}">Remove</button>
            <div class="embroidery-color-and-text">
              <div class="jacket-embroidery-choice">
                <img loading="lazy" class="embroidery-image" src="./assets/rectangle_115.webp" alt="${
                  e.location
                }">
                <p>${e.location}</p>
              </div>
              <div class="embroidery-color-and-text-input">
                <div class="embroidery-color-picker">
                  <label>Select Color:</label>
                  <div id="embroidery-thread-colors-picker-jacket-${t}" class="color-picker-container">
                    ${(function e(t) {
                      let a = ["#000000", "#FFFFFF", "#7A1313"];
                      return a
                        .map(
                          (e) => `
    <div class="color-circle" data-color="${e}" style="background-color: ${e};"></div>
  `
                        )
                        .join("");
                    })(21)}
                  </div>
                </div>
                <div class="embroidery-text-input">
                  <label>Enter Text (max 20 characters):</label>
                  <input
                    type="text"
                    id="embroideryTextInput${t}"
                    maxlength="20"
                    placeholder="Your text here"
                    value="${e.text}"
                  />
                </div>
              </div>
            </div>
          </div>
        `;
        }),
          l.embroidery.jacket.forEach((e, t) => {
            let a = document.getElementById(
              `embroidery-thread-colors-picker-jacket-${t}`
            );
            if (a) {
              let s = a.querySelectorAll(".color-circle");
              s.forEach((a) => {
                a.addEventListener("click", () => {
                  s.forEach((e) => e.classList.remove("selected")),
                    a.classList.add("selected"),
                    (l.embroidery.jacket[t].color =
                      a.getAttribute("data-color"));
                }),
                  e.color &&
                    e.color === a.getAttribute("data-color") &&
                    a.classList.add("selected");
              });
            }
            let n = document.getElementById(`embroideryTextInput${t}`);
            n &&
              n.addEventListener("input", () => {
                l.embroidery.jacket[t].text = n.value.trim();
              });
            let i = document.querySelector(
              `.remove-embroidery-button[data-index="${t}"]`
            );
            i &&
              i.addEventListener("click", () => {
                l.embroidery.jacket.splice(t, 1), J(4);
              });
          }),
          q(),
          Y();
        break;
      case 5:
        (t.innerHTML = `
        <p>Please provide your measurements for the pants.</p>
        <p>Enter your measurements in the fields provided. If you need assistance, refer to the diagram.</p>
      `),
          (s.style.display = "none"),
          (a.style.display = "flex"),
          (a.style.padding = "0 20px"),
          (a.style.justifyContent = "center"),
          (a.innerHTML = `
        <div id="pantsMeasurementWrapper">
          <img loading="lazy" id="pantsMeasurementImage" src="assets/pants/pants.png" alt="Pants Diagram">
          <!-- Measurement inputs will be positioned over this image -->
          ${[
            "Waist",
            "Crotch Depth",
            "Seat",
            "Knee",
            "Inseam",
            "Hips",
            "Thigh",
            "Outseam",
            "Ankle",
          ]
            .map(
              (e) => `
        <div class="measurement-input" id="${e.replace(/\s/g, "")}Measurement">
          <label for="${e}Input">${e}</label>
          <input type="number" id="${e}Input" />
          <div class="line"></div>
          <svg xmlns="http://www.w3.org/2000/svg" width="9" height="9" viewBox="0 0 9 9" fill="none">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M4.5 0.692308C2.39707 0.692308 0.692308 2.39707 0.692308 4.5C0.692308 6.60291 2.39707 8.30769 4.5 8.30769C6.60291 8.30769 8.30769 6.60291 8.30769 4.5C8.30769 2.39707 6.60291 0.692308 4.5 0.692308ZM0 4.5C0 2.01472 2.01472 0 4.5 0C6.98529 0 9 2.01472 9 4.5C9 6.98529 6.98529 9 4.5 9C2.01472 9 0 6.98529 0 4.5ZM4.5 4.15385C4.69117 4.15385 4.84615 4.30883 4.84615 4.5V6.11538C4.84615 6.30655 4.69117 6.46154 4.5 6.46154C4.30883 6.46154 4.15385 6.30655 4.15385 6.11538V4.5C4.15385 4.30883 4.30883 4.15385 4.5 4.15385ZM4.5 2.65385C4.24509 2.65385 4.03846 2.86049 4.03846 3.11538C4.03846 3.37028 4.24509 3.57692 4.5 3.57692H4.50462C4.75952 3.57692 4.96615 3.37028 4.96615 3.11538C4.96615 2.86049 4.75952 2.65385 4.50462 2.65385H4.5Z" fill="black"/>
          </svg>
        </div>
      `
            )
            .join("")}
        </div>
      `);
        let y = document.getElementById("pantsMeasurementWrapper");
        (y.style.position = "relative"),
          (y.style.display = "inline-block"),
          [
            "Waist",
            "Crotch Depth",
            "Seat",
            "Knee",
            "Inseam",
            "Hips",
            "Thigh",
            "Outseam",
            "Ankle",
          ].forEach((e) => {
            let t = document.getElementById(`${e}Input`);
            t.addEventListener("input", () => {
              l.measurements[e] = t.value;
            });
          }),
          q(),
          Y();
        break;
      default:
        (C.style.display = "block"), q(), console.log("Invalid step"), Y();
    }
  }
  (p = j()),
    L.runRenderLoop(() => p && p.render()),
    window.addEventListener("resize", () => L.resize());
  function Z(e, t, a) {
    document.querySelectorAll(".card_cardImage.selected").forEach((e) => {
      e.classList.remove("selected");
    });
    let s = a.querySelector(".card_cardImage");
    s && s.classList.add("selected");
    let n = `./batch1/${t}.png`;
    K(n), (l.texture = `${t}.png`);
  }
  function K(e) {
    if (!d || (d.diffuseTexture && d.diffuseTexture.name === e)) return;
    let t = new BABYLON.Texture(
      e,
      p,
      !1,
      !0,
      BABYLON.Texture.TRILINEAR_SAMPLINGMODE,
      () => {
        console.log(`Texture loaded: ${e}`);
      },
      (t, a) => {
        console.error(`Failed to load texture: ${e}`, t, a);
      }
    );
    (t.uScale = 5),
      (t.vScale = 5),
      (d.diffuseTexture = t),
      (d.diffuseTexture.name = e),
      (d.backFaceCulling = !1),
      (d.specularColor = new BABYLON.Color3(0, 0, 0)),
      (d.ambientColor = new BABYLON.Color3(1, 1, 1));
  }
  function Q() {
    console.log("[showMobileCutOptions] Displaying cut options...");
    let e = document.getElementById("textureContainer");
    e.innerHTML = "";
    let t = document.createElement("button");
    (t.textContent = "Confirm Cut Choice"),
      t.classList.add("back-to-cat"),
      t.addEventListener("click", () => {
        console.log("[showMobileCutOptions] Confirm clicked => returning"), G();
      }),
      e.appendChild(t);
    let a = document.createElement("div");
    (a.id = "mobileCutSlider"), a.classList.add("slider-container");
    let s = document.createElement("div");
    s.classList.add("cards-wrapper"),
      a.appendChild(s),
      [
        {
          src: "./assets/pants/cut/cut1.png",
          label: "Extra Slim",
          meshName: "cut1_mesh",
        },
        {
          src: "./assets/pants/cut/cut2.png",
          label: "Slim",
          meshName: "cut2_mesh",
        },
        {
          src: "./assets/pants/cut/cut3.png",
          label: "Straight",
          meshName: "cut3_mesh",
        },
        {
          src: "./assets/pants/cut/cut4.png",
          label: "Classic",
          meshName: "cut4_mesh",
        },
        {
          src: "./assets/pants/cut/cut5.png",
          label: "Relaxed Fit",
          meshName: "cut5_mesh",
        },
        {
          src: "./assets/pants/cut/cut6.png",
          label: "Tapered Leg",
          meshName: "cut6_mesh",
        },
        {
          src: "./assets/pants/cut/cut7.png",
          label: "Flat Front",
          meshName: "cut7_mesh",
        },
        {
          src: "./assets/pants/cut/cut8.png",
          label: "Pleated Front",
          meshName: "cut8_mesh",
        },
        {
          src: "./assets/pants/cut/cut9.png",
          label: "High waist",
          meshName: "cut9_mesh",
        },
        {
          src: "./assets/pants/cut/cut10.png",
          label: "Low rise",
          meshName: "cut10_mesh",
        },
      ].forEach((e) => {
        let t = document.createElement("div");
        t.classList.add("card_cardContainer", "part-option"),
          t.setAttribute("data-part-name", "Cut"),
          t.setAttribute("data-mesh-name", e.meshName),
          (t.tabIndex = 0),
          (t.style.touchAction = "pan-y"),
          (t.style.cursor = "pointer");
        let a = document.createElement("div");
        a.classList.add("img-wrapper"), (a.style.touchAction = "pan-y");
        let n = document.createElement("img");
        (n.src = e.src),
          (n.alt = e.label),
          (n.style.touchAction = "pan-y"),
          (n.style.width = "110px"),
          (n.style.height = "110px"),
          (n.style.objectFit = "contain"),
          a.appendChild(n);
        let i = document.createElement("p");
        (i.textContent = e.label),
          (i.style.touchAction = "pan-y"),
          t.appendChild(a),
          t.appendChild(i),
          t.addEventListener("click", () => {
            console.log("[showMobileCutOptions] Chosen cut:", e.label),
              s.querySelectorAll(".part-option").forEach((e) => {
                e.classList.remove("selected");
              }),
              t.classList.add("selected"),
              (l.design.pants.cut = e.meshName),
              eo("Cut", e.meshName);
          }),
          s.appendChild(t);
      }),
      e.appendChild(a),
      W("#mobileCutSlider");
  }
  function ee(e) {
    let t = e.target.closest(".accordion"),
      a = e.target.closest(".sub_accordion");
    if (t) {
      console.log("[accordionClickHandler] Top-level accordion clicked:", t),
        t.classList.toggle("active");
      let s = t.querySelector(".sign-acc"),
        n = t.nextElementSibling;
      n.style.maxHeight && "0px" !== n.style.maxHeight
        ? ((n.style.maxHeight = "0px"),
          (s.innerHTML = "+"),
          console.log("[accordionClickHandler] Collapsing panel"))
        : ((n.style.maxHeight = "300px"),
          (s.innerHTML = "-"),
          console.log("[accordionClickHandler] Expanding panel")),
        document.querySelectorAll(".accordion").forEach((e) => {
          if (e !== t && e.classList.contains("active")) {
            e.classList.remove("active");
            let a = e.querySelector(".sign-acc"),
              s = e.nextElementSibling;
            s &&
              ((s.style.maxHeight = "0px"),
              (a.innerHTML = "+"),
              console.log(
                `[accordionClickHandler] Closing other accordion: ${e.getAttribute(
                  "data-category"
                )}`
              ));
          }
        }),
        _.removeAllMeshes();
      let i = t.getAttribute("data-category");
      console.log("[accordionClickHandler] Category is:", i),
        "jacket" === i
          ? (console.log("[accordionClickHandler] Loading Jacket options..."),
            et(),
            g.length > 0
              ? H(g, 0.2)
              : console.warn("No jacket meshes available to zoom."))
          : "pants" === i
          ? console.log("[accordionClickHandler] Loading Pants options...")
          : "vest" === i
          ? (console.log(
              "[accordionClickHandler] Vest option clicked. (Example only)"
            ),
            g.forEach((e) => e.setEnabled(!1)),
            $.forEach((e) => e.setEnabled(!1)),
            _.removeAllMeshes(),
            q())
          : (console.log("[accordionClickHandler] Show all (fallback case)."),
            g.forEach((e) => e.setEnabled(!0)),
            $.forEach((e) => e.setEnabled(!0)),
            Object.keys(v).forEach((e) => {
              Object.keys(v[e]).forEach((t) => {
                let a = v[e][t];
                a && a.setEnabled(!0);
              });
            }),
            _.removeAllMeshes(),
            H([...g, ...$]),
            q());
    } else if (a) {
      console.log("[accordionClickHandler] Sub-accordion clicked:", a),
        a.classList.toggle("active");
      let r = a.querySelector(".sign-acc"),
        o = a.nextElementSibling;
      o.style.maxHeight && "0px" !== o.style.maxHeight
        ? ((o.style.maxHeight = "0px"),
          (r.innerHTML = "+"),
          console.log("[accordionClickHandler] Collapsing sub-panel"))
        : ((o.style.maxHeight = o.scrollHeight + "px"),
          (r.innerHTML = "-"),
          console.log(
            "[accordionClickHandler] Expanding sub-panel to:",
            o.style.maxHeight
          ));
      let l = a.getAttribute("data-category");
      console.log("[accordionClickHandler] Sub-category is:", l),
        "cut" === l &&
          window.matchMedia("(max-width: 1024.9px)").matches &&
          (console.log(
            "[accordionClickHandler] 'Cut' was clicked on MOBILE -> Show mobile cut function"
          ),
          Q());
    }
  }
  function et() {
    Object.keys(v).forEach((e) => {
      let t = l.design.jacket[e];
      t &&
        Object.keys(v[e]).forEach((a) => {
          let s = v[e][a];
          s &&
            (s.setEnabled(a === t),
            a === t &&
              ((s.renderingGroupId = 2),
              (E[e] = s),
              _.addMesh(s, BABYLON.Color3.White())));
        });
    }),
      H(g, 0.2),
      eu(),
      Object.entries(l.design.jacket).forEach(([e, t]) => {
        if (!t) return;
        let a = document.querySelector(
          `.part-option[data-part-name="${e}"][data-mesh-name="${t}"]`
        );
        a && a.classList.add(eh(e, t));
      });
    let e = l.design.jacket.PocketsTop;
    if (e) {
      let t = document.querySelector(
        `.part-option[data-part-name="Pockets"][data-mesh-name="${e}"]`
      );
      t && t.classList.add("selected-top-pocket");
    }
    let a = l.design.jacket.PocketsBottom;
    if (a) {
      let s = document.querySelector(
        `.part-option[data-part-name="Pockets"][data-mesh-name="${a}"]`
      );
      s && s.classList.add("selected-bottom-pocket");
    }
    let n = l.design.jacket.Pockets;
    if (n) {
      Object.keys(v.Pockets).forEach((e) => {
        v.Pockets[e].setEnabled(!1);
      });
      let i = v.Pockets[n];
      i &&
        (i.setEnabled(!0),
        (E.Pockets = i),
        _.addMesh(i, BABYLON.Color3.White()));
    }
  }
  function ea(e) {
    let t = e.target.closest(".part-option");
    if (t) {
      let a = t.getAttribute("data-part-name"),
        s = t.getAttribute("data-mesh-name");
      if (!a || !s) {
        console.warn("Missing data-part-name or data-mesh-name attributes.");
        return;
      }
      if ((eo(a, s), "Pockets" === a)) {
        let n = es.includes(s),
          i = en.includes(s);
        n
          ? es.forEach((e) => {
              let t = document.querySelector(
                `.part-option[data-mesh-name="${e}"]`
              );
              t && e !== s && t.classList.remove("selected-top-pocket");
            })
          : i &&
            en.forEach((e) => {
              let t = document.querySelector(
                `.part-option[data-mesh-name="${e}"]`
              );
              t && e !== s && t.classList.remove("selected-bottom-pocket");
            });
      } else
        document
          .querySelectorAll(`.part-option[data-part-name="${a}"]`)
          .forEach((e) => {
            e.classList.remove(
              "selected-back",
              "selected-lapel",
              "selected-top-pocket",
              "selected-bottom-pocket"
            );
          });
      if (
        (t.classList.add(eh(a, s)), ["Back", "Lapels", "Pockets"].includes(a))
      ) {
        let r = document.querySelector('.accordion[data-category="jacket"]');
        r && !r.classList.contains("active") ? r.click() : et();
      }
      return;
    }
    let o = e.target.closest(".part-item");
    if (o) {
      let l = o.getAttribute("data-part");
      if (!l) {
        console.warn("Missing data-part attribute on part-item.");
        return;
      }
      let c = E[l];
      c &&
        (_.removeAllMeshes(),
        _.addMesh(c, BABYLON.Color3.White()),
        document.querySelectorAll(".part-item").forEach((e) => {
          e.classList.remove(
            "selected-back",
            "selected-lapel",
            "selected-top-pocket",
            "selected-bottom-pocket",
            "selected"
          );
        }),
        O(c),
        z(l, c.name)),
        document
          .querySelectorAll(`.part-option[data-part-name="${l}"]`)
          .forEach((e) => {
            e.classList.remove(
              "selected-back",
              "selected-lapel",
              "selected-top-pocket",
              "selected-bottom-pocket"
            );
          });
    }
  }
  let es = ["4on2_pocket_4", "4on2_pocket_5", "4on2_pocket_6"],
    en = [
      "4on2_pocket_1",
      "4on2_pocket_2",
      "4on2_pocket_3",
      "4on2_pocket_7",
      "4on2_pocket_8",
    ];
  function ei(e) {
    let t = document.querySelector(`.part-option[data-mesh-name="${e}"]`);
    t &&
      t.classList.remove(
        "selected-top-pocket",
        "selected-bottom-pocket",
        "selected-pockets",
        "selected-back",
        "selected-lapel"
      );
    let a = v.Pockets[e];
    a && a.setEnabled(!1);
  }
  function er(e) {
    let t = v.Pockets[e];
    t &&
      (t.setEnabled(!0),
      (t.renderingGroupId = 2),
      _.removeAllMeshes(),
      _.addMesh(t, BABYLON.Color3.White()),
      O(t));
    let a = document.querySelector(`.part-option[data-mesh-name="${e}"]`);
    if (a) {
      let s = "selected-pockets";
      es.includes(e)
        ? (s = "selected-top-pocket")
        : en.includes(e) && (s = "selected-bottom-pocket"),
        a.classList.remove(
          "selected-back",
          "selected-lapel",
          "selected-top-pocket",
          "selected-bottom-pocket"
        ),
        a.classList.add(s);
    }
  }
  function eo(e, t) {
    if ("Pockets" !== e) {
      Object.keys(v[e]).forEach((t) => {
        let a = v[e][t];
        a && a.setEnabled(!1);
      });
      let a = v[e][t];
      a &&
        (a.setEnabled(!0),
        (a.renderingGroupId = 2),
        (E[e] = a),
        (l.design.jacket[e] = t),
        _.removeAllMeshes(),
        _.addMesh(a, BABYLON.Color3.White()),
        O(a));
      let s = document.querySelector(`.part-option[data-mesh-name="${t}"]`);
      s &&
        (s.classList.remove(
          "selected-back",
          "selected-lapel",
          "selected-top-pocket",
          "selected-bottom-pocket"
        ),
        s.classList.add(eh(e, t)));
      return;
    }
    if (window.matchMedia("(max-width: 1024.9px)").matches) {
      Object.keys(v.Pockets).forEach((e) => {
        let t = v.Pockets[e];
        t && t.setEnabled(!1);
      });
      let n = v.Pockets[t];
      n.setEnabled(!0),
        (n.renderingGroupId = 2),
        (E.Pockets = n),
        (l.design.jacket.Pockets = t),
        _.removeAllMeshes(),
        _.addMesh(n, BABYLON.Color3.White()),
        O(n);
    } else {
      let i = es.includes(t),
        r = en.includes(t);
      i
        ? l.design.jacket.PocketsTop === t
          ? ((l.design.jacket.PocketsTop = void 0),
            ei(t),
            _.removeMesh(v.Pockets[t]))
          : (es.forEach((e) => ei(e)), er(t), (l.design.jacket.PocketsTop = t))
        : r &&
          (l.design.jacket.PocketsBottom === t
            ? ((l.design.jacket.PocketsBottom = void 0),
              ei(t),
              _.removeMesh(v.Pockets[t]))
            : (en.forEach((e) => ei(e)),
              er(t),
              (l.design.jacket.PocketsBottom = t)));
    }
  }
  function el(e) {}
  function ec(e) {
    let t = e.target.closest(".jacket-embroidery-choice");
    if (!t) return;
    let a = t.querySelector("p").innerText.trim();
    if ("No Embroidery" === a)
      (l.embroidery.jacket = []),
        document
          .querySelectorAll(".jacket-embroidery-choice")
          .forEach((e) => e.classList.remove("selected")),
        t.classList.add("selected");
    else {
      let s = l.embroidery.jacket.findIndex((e) => e.location === a);
      if (
        (-1 === s
          ? (l.embroidery.jacket.push({ location: a, text: "", color: null }),
            t.classList.add("selected"))
          : (l.embroidery.jacket.splice(s, 1), t.classList.remove("selected")),
        l.embroidery.jacket.length > 0)
      ) {
        let n = document.querySelector(
          ".jacket-embroidery-choice.no-embroidery"
        );
        n && n.classList.remove("selected");
      } else {
        let i = document.querySelector(
          ".jacket-embroidery-choice.no-embroidery"
        );
        i && i.classList.add("selected");
      }
    }
    l.embroidery.hasEmbroidery = l.embroidery.jacket.length > 0;
    let r = document.querySelector(".characters-inputs");
    r && "none" !== r.style.display && (e$(), (r.style.display = "block"));
  }
  function ed(e) {
    console.log("User choices:", e);
  }
  function ep(e) {
    let t = m.rotation.y + e,
      a = new BABYLON.Animation(
        "rotateAnimation",
        "rotation.y",
        60,
        BABYLON.Animation.ANIMATIONTYPE_FLOAT,
        BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE
      ),
      s = [
        { frame: 0, value: m.rotation.y },
        { frame: 120, value: t },
      ];
    a.setKeys(s),
      (m.animations = []),
      m.animations.push(a),
      p.beginAnimation(m, 0, 120, !1, 1, () => {}),
      (m.rotation.y = t),
      console.log(`Model rotated to Y=${t}`);
  }
  function em(e, t) {
    (e = gsap.utils.toArray(e)), (t = t || {});
    let a = gsap.timeline({
        repeat: t.repeat,
        paused: t.paused,
        defaults: { ease: "none" },
        onReverseComplete: () => a.totalTime(a.rawTime() + 100 * a.duration()),
      }),
      s = e.length,
      n = e[0].offsetLeft,
      i = [],
      r = [],
      o = [],
      l = 0,
      c = 100 * (t.speed || 1),
      d = !1 === t.snap ? (e) => e : gsap.utils.snap(t.snap || 1),
      p = () =>
        e.forEach((e, t) => {
          (r[t] = parseFloat(gsap.getProperty(e, "width", "px"))),
            (o[t] = d(
              (parseFloat(gsap.getProperty(e, "x", "px")) / r[t]) * 100 +
                gsap.getProperty(e, "xPercent")
            ));
        }),
      m = () =>
        e[s - 1].offsetLeft +
        (o[s - 1] / 100) * r[s - 1] -
        n +
        e[s - 1].offsetWidth * gsap.getProperty(e[s - 1], "scaleX") +
        (parseFloat(t.paddingRight) || 0),
      u,
      g,
      $,
      h,
      y,
      _;
    for (
      p(),
        gsap.set(e, { xPercent: (e) => o[e] }),
        gsap.set(e, { x: 0 }),
        u = m(),
        _ = 0;
      _ < s;
      _++
    )
      (y = e[_]),
        (g = (o[_] / 100) * r[_]),
        (h = ($ = y.offsetLeft + g - n) + r[_] * gsap.getProperty(y, "scaleX")),
        a
          .to(y, { xPercent: d(((g - h) / r[_]) * 100), duration: h / c }, 0)
          .fromTo(
            y,
            { xPercent: d(((g - h + u) / r[_]) * 100) },
            {
              xPercent: o[_],
              duration: (g - h + u - g) / c,
              immediateRender: !1,
            },
            h / c
          )
          .add("label" + _, $ / c),
        (i[_] = $ / c);
    function k(e, t) {
      (t = t || {}), Math.abs(e - l) > s / 2 && (e += e > l ? -s : s);
      let n = gsap.utils.wrap(0, s, e),
        r = i[n];
      return (
        r > a.time() != e > l &&
          ((t.modifiers = { time: gsap.utils.wrap(0, a.duration()) }),
          (r += a.duration() * (e > l ? 1 : -1))),
        (l = n),
        (t.overwrite = !0),
        a.tweenTo(r, t)
      );
    }
    if (
      ((a.next = (e) => k(l + 1, e)),
      (a.previous = (e) => k(l - 1, e)),
      (a.current = () => l),
      (a.toIndex = (e, t) => k(e, t)),
      (a.updateIndex = () => (l = Math.round(a.progress() * e.length))),
      (a.times = i),
      (a.items = e),
      a.progress(1, !0).progress(0, !0),
      t.reversed && (a.vars.onReverseComplete(), a.reverse()),
      t.draggable && "function" == typeof Draggable)
    ) {
      let b = document.createElement("div"),
        v = gsap.utils.wrap(0, 1),
        f,
        E,
        C,
        L,
        x,
        A = () => a.progress(v(E + (C.startX - C.x) * f)),
        w = () => a.updateIndex();
      "undefined" == typeof InertiaPlugin &&
        console.warn(
          "InertiaPlugin required for momentum-based scrolling and snapping. https://greensock.com/club"
        ),
        (C = Draggable.create(b, {
          trigger: e[0].parentNode,
          type: "x",
          onPress() {
            (E = a.progress()),
              a.progress(0),
              p(),
              (f = 1 / (u = m())),
              (x = Math.pow(
                10,
                (((L = u / e.length) + "").split(".")[1] || "").length
              )),
              a.progress(E);
          },
          onDrag: A,
          onThrowUpdate: A,
          inertia: !0,
          snap(e) {
            let t = Math.round(parseFloat(e) / L) * L * x;
            return (t - (t % 1)) / x;
          },
          onRelease: w,
          onThrowComplete: () => gsap.set(b, { x: 0 }) && w(),
        })[0]);
    }
    return a;
  }
  function eu() {
    u.inputs.attached.keyboard || u.attachControl(C, !0),
      console.log("Camera controls enabled.");
  }
  function eg() {
    let e = document.querySelectorAll(".cards-wrapper");
    e.forEach((e) => {
      if (e.dataset.sliderInitialized) return;
      let t = gsap.utils.toArray(".card_cardContainer", e),
        a = em(t, { paused: !0, draggable: !0, speed: 2, snap: 1 });
      a.progress(0, !1),
        gsap.set(e, { x: 0 }),
        (e.dataset.sliderInitialized = "true");
    });
  }
  function e$() {
    let e = document.querySelector(".characters-inputs");
    if ((e && e.remove(), 0 === l.embroidery.jacket.length)) return;
    if (!k && !(k = document.getElementById("embroideryLocationsContainer"))) {
      console.error(
        "Element with ID 'embroideryLocationsContainer' not found."
      );
      return;
    }
    let t = document.createElement("div");
    t.classList.add("characters-inputs");
    let a = '<h3 class="embroidery-text">Embroidery Text:</h3>';
    l.embroidery.jacket.forEach((e, t) => {
      a += `
      <div class="embroidery-input-group">
        <input
          class="embroidery-input"
          placeholder="${e.location} Enter your initials"
          type="text"
          id="embroideryTextInput${t}"
          maxlength="20"
          value="${e.text || ""}"
        />
      </div>
    `;
    }),
      (t.innerHTML = a),
      k.appendChild(t),
      l.embroidery.jacket.forEach((e, t) => {
        let a = document.getElementById(`embroideryTextInput${t}`);
        a &&
          a.addEventListener("input", () => {
            e.text = a.value.trim();
          });
      });
  }
  function eh(e, t) {
    switch (e) {
      case "Back":
        return "selected-back";
      case "Lapels":
        return "selected-lapel";
      case "Pockets":
        if (es.includes(t)) return "selected-top-pocket";
        if (en.includes(t)) return "selected-bottom-pocket";
        return "selected-pockets";
      default:
        return "selected";
    }
  }
  document
    .getElementById("resetCameraButton")
    .addEventListener("click", function () {
      q();
    }),
    document
      .getElementById("backButton")
      .addEventListener("click", function () {
        eu(),
          o > 1 &&
            (5 === o ? (o = 0 === l.embroidery.jacket.length ? 3 : 4) : o--,
            J(o),
            eu());
      }),
    document
      .getElementById("nextButton")
      .addEventListener("click", function () {
        eu();
        let e = null;
        if (1 === o) {
          let t = document.querySelector(".card_cardImage.selected");
          t
            ? ((e = { texture: t.alt }), (l.texture = t.alt))
            : ((e = { texture: "E5102-38.png" }), (l.texture = "E5102-38.png"));
        } else if (2 === o) e = { design: l.design };
        else if (3 === o) e = { jacketEmbroidery: l.embroidery.jacket };
        else if (4 === o)
          e = { jacketEmbroideryCustomizations: l.embroidery.jacket };
        else if (5 === o) {
          (function e() {
            for (let t of [
              "Waist",
              "Crotch Depth",
              "Seat",
              "Knee",
              "Inseam",
              "Hips",
              "Thigh",
              "Outseam",
              "Ankle",
            ])
              if (
                !l.measurements ||
                !l.measurements[t] ||
                "" === l.measurements[t]
              )
                return !1;
            return !0;
          })()
            ? J(++o)
            : alert("Please fill in all measurements before proceeding.");
          return;
        }
        console.log("Current Step: ", o),
          console.log("Selected Choice: ", e),
          console.log("User Choices: ", l),
          o < 5
            ? (3 === o && 0 === l.embroidery.jacket.length ? (o = 5) : o++,
              J(o))
            : 5 === o ||
              (function e() {
                let t =
                  "Configuration Complete! Thank you for customizing your suit.\n\n";
                for (let a in ((t += `Texture: ${l.texture}
`),
                (t += "Design Selections:\n"),
                l.design.jacket))
                  t += `  ${a}: ${l.design.jacket[a]}
`;
                for (let s in l.design.pants)
                  t += `  ${s}: ${l.design.pants[s]}
`;
                if (
                  (l.embroidery.hasEmbroidery && l.embroidery.jacket.length > 0
                    ? ((t += `Embroidery Locations:
`),
                      l.embroidery.jacket.forEach((e, a) => {
                        (t += `  Embroidery ${a + 1}:
`),
                          (t += `    Location: ${e.location}
`),
                          (t += `    Text: ${e.text || "N/A"}
`),
                          (t += `    Color: ${e.color || "N/A"}
`);
                      }))
                    : (t += "No Embroidery Selected.\n"),
                  l.measurements)
                )
                  for (let n in ((t += "Measurements:\n"), l.measurements))
                    t += `  ${n}: ${l.measurements[n]}
`;
                alert(t);
              })();
      }),
    document
      .getElementById("textureContainer")
      .addEventListener("click", function (e) {
        if (e.target.classList.contains("card_cardImage"));
        else if (e.target.closest(".pants-item img")) {
          document
            .querySelectorAll(".pants-item img")
            .forEach((e) => e.classList.remove("selected")),
            e.target.closest(".pants-item img").classList.add("selected");
          let t = e.target.closest(".pants-item img").alt;
          l.design.pants.Pockets = t;
        }
      }),
    fetch("textures.json")
      .then((e) => e.json())
      .then((e) => {
        (r = e),
          (function e() {
            if (A) return;
            A = !0;
            let t = document.getElementById("textureContainer");
            t.addEventListener("click", ee);
          })(),
          (function e() {
            if (w) return;
            w = !0;
            let t = document.getElementById("textureContainer");
            t.addEventListener("click", ea);
          })(),
          (function e() {
            if (I) return;
            I = !0;
            let t = document.getElementById("textureContainer");
            t.addEventListener("click", el);
          })(),
          (function e() {
            if (M) return;
            M = !0;
            let t = document.getElementById("textureContainer");
            t.addEventListener("click", ec);
          })();
      })
      .catch((e) => console.error("Error loading textures.json:", e)),
    (e = !0),
    (t = !0),
    g.forEach((t) => t.setEnabled(e)),
    $.forEach((e) => e.setEnabled(t));
});
